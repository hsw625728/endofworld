////  Label.m//  Eve of Impact////  Created by Rik Schennink on 4/13/10.//  Copyright 2011 Rik Schennink. All rights reserved.//#import "Label.h"#import "ApplicationModel.h"#import "RenderEngine.h"#import "Prefs.h"#import "Character.h"#import "Font.h"@implementation Label@synthesize text;-(id)initWithFont:(Font*)fontFamily {		if ((self = [super init])) {				font = [fontFamily retain];		buffer = QuadBufferMake();			}	return self;}-(NSString*)text {	return self->text;}-(void)setText:(NSString *)textValue {	if (textValue != text) {		[textValue retain];		[text release];		text = textValue;		buffer.quadCount = 0;	}}-(void)setPosition:(CGPoint)positionValue {		if (position.x != positionValue.x || position.y != positionValue.y) {				position = CGPointMake(positionValue.x,positionValue.y);		buffer.quadCount = 0;			}}-(void)draw:(CGRect)frame {		if (!self.shouldDraw) {		return;	}		[super draw:frame];		CGPoint global = [self localToGlobal];		uint i;		if (buffer.quadCount == 0) {				// convert label to quads		Character* c;		uint offset = 0;		float maxHeight = 0;		uint count = [text length];				if (count > 0) {						for (i=0; i<count; i++) {								// get character at index				NSString* textCharacter = [text substringWithRange:NSMakeRange(i, 1)];								if ([textCharacter compare:@" "] == NSOrderedSame) {					offset += (font.space * scale);					continue;				}								// get font character by character				c = [font characterAt:textCharacter];								if (c == nil) {					c = [font characterAt:@"?"];				}								// create quad template				QuadTemplate q = QuadTemplateMake(global.x + offset + ((c.width * .5) * scale),  												  global.y - ((c.height * .5) * scale), 												  0, 												  (c.size.width * scale), 												  (c.size.height * scale), 												  color, 												  c.map);								offset += (c.width * scale);								if (c.height > maxHeight) {					maxHeight = c.height;				}								// add to quadbuffer				addQuadToQuadBuffer(q, &buffer);			}						// calculate size			size.width	= offset;			size.height = maxHeight * scale;						}	}		for (i=0;i<buffer.quadCount;i++) {				QuadTemplate q = buffer.quads[i];		q.color.a *= flicker;				[[RenderEngine singleton] addQuad:&q];			}	}-(void)dealloc {		[font release];	[text release];		[super dealloc];}@end